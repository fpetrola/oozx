/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * LoadSaveMemoryDialog.java
 *
 * Created on 19-dic-2011, 13:01:51
 */
package gui;

import machine.MachineTypes;
import machine.Memory;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.awt.Dialog.ModalityType;
import java.io.*;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author jsanchez
 */
public class LoadSaveMemoryDialog extends JPanel {

    private JDialog loadSaveMemoryDialog;
    private JFileChooser fileDlg;
    FileNameExtensionFilter binExtension;
    private Memory memory;
    private File filename;
    private boolean saveDialog;

    /** Creates new form LoadSaveMemoryDialog */
    public LoadSaveMemoryDialog(Memory memory) {
        this.memory = memory;
        initComponents();
        binExtension = new FileNameExtensionFilter(
            ResourceBundle.getBundle("gui/Bundle").getString("BINARY_EXTENSION_TYPE"), "bin");
    }

    public boolean showLoadDialog(Component parent, File file) {
        Frame owner = null;
        if (parent instanceof Frame) {
            owner = (Frame) parent;
        } else {
            owner = (Frame) SwingUtilities.getAncestorOfClass(Frame.class, parent);
        }

        if (loadSaveMemoryDialog == null) {
            loadSaveMemoryDialog = new JDialog(owner, false);
            loadSaveMemoryDialog.setModalityType(ModalityType.APPLICATION_MODAL);
            loadSaveMemoryDialog.getContentPane().add(this);
            loadSaveMemoryDialog.pack();
        }

        saveDialog = false;
        filename = file;
        ResourceBundle bundle = ResourceBundle.getBundle("gui/Bundle"); // NOI18N
        loadSaveMemoryDialog.setTitle(bundle.getString("LoadSaveMemoryDialog.LoadTitle.text"));
        fileChoosedLabel.setText(bundle.getString("LoadSaveMemoryDialog.fileChoosedLabel.text"));
        addressSpinner.setEnabled(false);
        sizeSpinner.setEnabled(false);
        sizeSpinner.getModel().setValue(0);
        rangeCombobox.setEnabled(false);
        loadSaveButton.setEnabled(false);
        loadSaveButton.setText(bundle.getString("LoadSaveMemoryDialog.loadButton.text"));
        if (filename != null) {
            fileChoosedLabel.setText(filename.getName());
            addressSpinner.setEnabled(true);
            sizeSpinner.setEnabled(true);
            if (!saveDialog) {
                sizeSpinner.setModel(new SpinnerNumberModel(filename.length(), 0, filename.length(), 1));
            }
            
            rangeCombobox.setSelectedIndex(0);
            rangeCombobox.setEnabled(memory.getSpectrumModel().codeModel != MachineTypes.CodeModel.SPECTRUM48K);
            loadSaveButton.setEnabled(true);
        }
        loadSaveMemoryDialog.setVisible(true);
        return true;
    }

    public boolean showSaveDialog(Component parent) {
        Frame owner = null;
        if (parent instanceof Frame) {
            owner = (Frame) parent;
        } else {
            owner = (Frame) SwingUtilities.getAncestorOfClass(Frame.class, parent);
        }

        if (loadSaveMemoryDialog == null) {
            loadSaveMemoryDialog = new JDialog(owner, false);
            loadSaveMemoryDialog.setModalityType(ModalityType.APPLICATION_MODAL);
            loadSaveMemoryDialog.getContentPane().add(this);
            loadSaveMemoryDialog.pack();
        }

        saveDialog = true;
        filename = null;
        ResourceBundle bundle = ResourceBundle.getBundle("gui/Bundle"); // NOI18N
        loadSaveMemoryDialog.setTitle(bundle.getString("LoadSaveMemoryDialog.SaveTitle.text"));
        fileChoosedLabel.setText(bundle.getString("LoadSaveMemoryDialog.fileChoosedLabel.text"));
        addressSpinner.setEnabled(false);
        sizeSpinner.setEnabled(false);
        sizeSpinner.setModel(new SpinnerNumberModel(0, 0, 65536, 1));
        rangeCombobox.setEnabled(false);
        loadSaveButton.setText(bundle.getString("LoadSaveMemoryDialog.saveButton.text"));
        loadSaveButton.setEnabled(false);
        loadSaveMemoryDialog.setVisible(true);
        return true;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChoosedLabel = new JLabel();
        browseButton = new JButton();
        addressLabel = new JLabel();
        addressSpinner = new JSpinner();
        sizeLabel = new JLabel();
        sizeSpinner = new JSpinner();
        rangeLabel = new JLabel();
        rangeCombobox = new JComboBox();
        closeButton = new JButton();
        archiveLabel = new JLabel();
        loadSaveButton = new JButton();

        fileChoosedLabel.setHorizontalAlignment(SwingConstants.RIGHT);
        ResourceBundle bundle = ResourceBundle.getBundle("gui/Bundle"); // NOI18N
        fileChoosedLabel.setText(bundle.getString("LoadSaveMemoryDialog.fileChoosedLabel.text")); // NOI18N

        browseButton.setText(bundle.getString("LoadSaveMemoryDialog.browseButton.text")); // NOI18N
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        addressLabel.setText(bundle.getString("LoadSaveMemoryDialog.addressLabel.text")); // NOI18N

        addressSpinner.setModel(new SpinnerNumberModel(0, 0, 65535, 1));

        sizeLabel.setText(bundle.getString("LoadSaveMemoryDialog.sizeLabel.text")); // NOI18N

        sizeSpinner.setModel(new SpinnerNumberModel(0, 0, 65535, 1));

        rangeLabel.setText(bundle.getString("LoadSaveMemoryDialog.rangeLabel.text")); // NOI18N

        rangeCombobox.setMaximumRowCount(9);
        rangeCombobox.setModel(new DefaultComboBoxModel(new String[] { "0x0000-0xFFFF", "RAM 0", "RAM 1", "RAM 2", "RAM 3", "RAM 4", "RAM 5", "RAM 6", "RAM 7" }));

        closeButton.setText(bundle.getString("LoadSaveMemoryDialog.closeButton.text")); // NOI18N
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        archiveLabel.setText(bundle.getString("LoadSaveMemoryDialog.archiveLabel.text")); // NOI18N

        loadSaveButton.setText(bundle.getString("LoadSaveMemoryDialog.loadButton.text")); // NOI18N
        loadSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadSaveButtonActionPerformed(evt);
            }
        });

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addGroup(GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(archiveLabel, GroupLayout.PREFERRED_SIZE, 68, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                        .addComponent(fileChoosedLabel, GroupLayout.PREFERRED_SIZE, 145, GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(rangeLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rangeCombobox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addGroup(GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(addressLabel, GroupLayout.PREFERRED_SIZE, 128, GroupLayout.PREFERRED_SIZE)
                            .addComponent(sizeLabel, GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                            .addComponent(addressSpinner, GroupLayout.PREFERRED_SIZE, 86, GroupLayout.PREFERRED_SIZE)
                            .addComponent(sizeSpinner, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addComponent(browseButton)
                    .addComponent(loadSaveButton)
                    .addComponent(closeButton))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(archiveLabel)
                    .addComponent(fileChoosedLabel)
                    .addComponent(browseButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(addressLabel)
                    .addComponent(addressSpinner, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(sizeLabel)
                    .addComponent(sizeSpinner, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(loadSaveButton))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(closeButton)
                    .addComponent(rangeCombobox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(rangeLabel))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        if (fileDlg == null) {
            fileDlg = new JFileChooser("/home/jsanchez/Spectrum");
            fileDlg.addChoosableFileFilter(binExtension);
            fileDlg.setFileFilter(binExtension);
        }
        
        int status;
        if (saveDialog) {
            status = fileDlg.showSaveDialog(this);
        } else {
            status = fileDlg.showOpenDialog(this);
        }
        
        if (status == JFileChooser.APPROVE_OPTION) {
            if (binExtension.accept(fileDlg.getSelectedFile())) {
                filename = fileDlg.getSelectedFile();
            } else {
                String saveName = fileDlg.getSelectedFile().getAbsolutePath() + ".bin";
                filename = new File(saveName);
            }
            
            fileChoosedLabel.setText(filename.getName());
            addressSpinner.setEnabled(true);
            sizeSpinner.setEnabled(true);
            if (!saveDialog) {
                sizeSpinner.setModel(new SpinnerNumberModel(filename.length(), 0, filename.length(), 1));
            }
            
            rangeCombobox.setSelectedIndex(0);
            rangeCombobox.setEnabled(memory.getSpectrumModel().codeModel != MachineTypes.CodeModel.SPECTRUM48K);
            loadSaveButton.setEnabled(true);
        }
    }//GEN-LAST:event_browseButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        loadSaveMemoryDialog.setVisible(false);
    }//GEN-LAST:event_closeButtonActionPerformed

    private void loadSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadSaveButtonActionPerformed
        ResourceBundle bundle = ResourceBundle.getBundle("gui/Bundle"); // NOI18N
        SpinnerNumberModel snmAddress = (SpinnerNumberModel) addressSpinner.getModel();
        SpinnerNumberModel snmSize = (SpinnerNumberModel) sizeSpinner.getModel();
        int start = snmAddress.getNumber().intValue();
        int size = snmSize.getNumber().intValue();
        int maxSize = rangeCombobox.getSelectedIndex() == 0 ? 0x10000 : 0x4000;
        String error;

        if (size == 0)
            return;
        
        if (start + size > maxSize) {
            error = String.format(bundle.getString("SIZE_BINARY_ERROR"), maxSize);
            JOptionPane.showMessageDialog(this, error,
                    bundle.getString("SIZE_BINARY_ERROR_TITLE"), JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (saveDialog) {
            BufferedOutputStream fOut = null;
            try {
                fOut = new BufferedOutputStream(new FileOutputStream(filename));

                if (rangeCombobox.getSelectedIndex() == 0) {
                    // Range 0x0000-0xFFFF
                    for (int addr = start; addr < start + size; addr++) {
                        fOut.write(memory.readByte(addr));
                    }
                } else {
                    // Page Range
                    for (int addr = start; addr < start + size; addr++) {
                        fOut.write(memory.readByte(rangeCombobox.getSelectedIndex() - 1, addr));
                    }
                }
                JOptionPane.showMessageDialog(this, bundle.getString("SAVE_BINARY_OK"),
                        bundle.getString("SAVE_BINARY_OK_TITLE"), JOptionPane.INFORMATION_MESSAGE);

            } catch (FileNotFoundException excpt) {
                Logger.getLogger(LoadSaveMemoryDialog.class.getName()).log(Level.SEVERE, null, excpt);
            } catch (IOException ioExcpt) {
                Logger.getLogger(LoadSaveMemoryDialog.class.getName()).log(Level.SEVERE, null, ioExcpt);
            } finally {
                try {
                    if (fOut != null)
                        fOut.close();
                } catch (IOException ex) {
                    Logger.getLogger(LoadSaveMemoryDialog.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            return;
        } else {
            BufferedInputStream fIn = null;
            try {
                fIn = new BufferedInputStream(new FileInputStream(filename));
                if (rangeCombobox.getSelectedIndex() == 0) {
                    // Range 0x0000-0xFFFF
                    for (int addr = start; addr < start + size; addr++) {
                        memory.writeByte(addr, (byte)(fIn.read() & 0xff));
                    }
                } else {
                    // Page Range
                    for (int addr = start; addr < start + size; addr++) {
                        memory.writeByte(rangeCombobox.getSelectedIndex() - 1,
                                addr, (byte)(fIn.read() & 0xff));
                    }
                }
                JOptionPane.showMessageDialog(this, bundle.getString("LOAD_BINARY_OK"),
                        bundle.getString("LOAD_BINARY_OK_TITLE"), JOptionPane.INFORMATION_MESSAGE);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(LoadSaveMemoryDialog.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(LoadSaveMemoryDialog.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    if (fIn != null)
                        fIn.close();
                } catch (IOException ex) {
                    Logger.getLogger(LoadSaveMemoryDialog.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_loadSaveButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JLabel addressLabel;
    private JSpinner addressSpinner;
    private JLabel archiveLabel;
    private JButton browseButton;
    private JButton closeButton;
    private JLabel fileChoosedLabel;
    private JButton loadSaveButton;
    private JComboBox rangeCombobox;
    private JLabel rangeLabel;
    private JLabel sizeLabel;
    private JSpinner sizeSpinner;
    // End of variables declaration//GEN-END:variables
}
